{"version":3,"sources":["components/PersonForm.js","components/Persons.js","components/Filter.js","components/Notification.js","services/phonebook.js","App.js","serviceWorker.js","index.js"],"names":["PersonFrom","addPerson","newName","handleNameChange","newNumber","handleNumberChange","onSubmit","value","onChange","type","Persons","persons","handleDelete","map","person","key","name","number","onClick","Filter","newFilter","handleFilterChange","Notification","status","successMsg","failureMsg","style","color","fontSize","backgroundColor","borderStyle","border","padding","marginBottom","borderRadius","baseUrl","axios","get","then","response","data","newObject","post","id","put","delete","App","useState","setPersons","setNewName","setNewNumber","setFilter","setStatus","msgName","setMsgName","useEffect","phonebookService","initialPersons","displayPersons","filter","toLowerCase","search","event","target","PersonForm","preventDefault","exist","find","p","undefined","newPerson","concat","setTimeout","window","confirm","updatedPerson","catch","err","deletePerson","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"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","file":"static/js/main.876ce620.chunk.js","sourcesContent":["import React from 'react'\n\nconst PersonFrom = ({\n\taddPerson,\n\tnewName,\n\thandleNameChange,\n\tnewNumber, \n\thandleNumberChange\n}) => {\n\treturn (\n\t\t<div>\n\t      <form onSubmit={addPerson}>\n        <div>\n          name: <input value={newName} onChange={handleNameChange} />\n        </div>\n        <div>\n          number: <input value={newNumber} onChange={handleNumberChange} />\n        </div>\n        <div>\n          <button type=\"submit\">add</button>\n        </div>\n      </form>\n\t\t</div>\n\t)\n}\n\nexport default PersonFrom\n","import React from 'react'\n\nconst Persons = ({persons, handleDelete}) => {\n\treturn (\n\t\t<div>\n\t\t\t<table>\n\t\t\t\t<tbody>\n\t\t\t\t\t{persons.map(person => \n\t\t\t\t\t\t// <Entry key={person.name} person={person} handleDelete={handleDelete}/>\n\t\t\t\t\t\t<tr key={person.name}>\n\t\t\t\t\t  \t<td> {person.name} </td>\n\t\t\t\t\t  \t<td>  {person.number} </td>\n\t\t\t\t\t  \t<td> <button onClick={() => handleDelete(person)}> delete </button> </td>\n\t\t\t\t\t  </tr>\n\t\t\t\t\t\t)}\n\n\t\t\t\t</tbody>\n\t\t\t</table>\n\t\t</div>\n\t)\n}\nexport default Persons\n","import React from 'react'\n\nconst Filter = ({\n\tnewFilter,\n\thandleFilterChange \n}) => {\n\n\treturn (\n\t\t<div>\n      <form>\n\t      <div>\n\t        filter shown with: <input value={newFilter} onChange={handleFilterChange} />\n\t      </div>\n\t    </form>\n\t\t</div>\n\t)\n}\n\nexport default Filter\n","import React from 'react'\n\nconst Notification = ({name, status}) => {\n  const successStyle = {\n    color: 'green',\n    fontSize: 20,\n    backgroundColor: 'lightgrey',\n    border: '5px solid green',\n    padding: 10,\n    marginBottom: 10,\n    borderRadius: 5\n  }\n\n  const failureStyle = {\n    color: 'red',\n    fontSize: 20,\n    backgroundColor: 'lightgrey',\n    borderStyle: 'solid',\n\t\tborder: '5px solid red',\n    padding: 10,\n    marginBottom: 10,\n    borderRadius: 5\n  }\n\n  const successMsg = `Added ${name}`\n  const failureMsg = `Information of ${name} has already been removed from server`\n\n  if (status === 1){\n  \treturn (\n  \t\t<p style={failureStyle}> {failureMsg} </p>\n  \t)\n  } else if (status === 0) {\n  \treturn (\n  \t\t<p style={successStyle}> {successMsg} </p>\n  \t)\n  } else {\n  \treturn null\n  }\n\n}\n\nexport default Notification\n","import axios from 'axios'\n\nconst baseUrl = '/api/persons'\n\nconst getAll = () => {\n\treturn axios.get(baseUrl).then(response => response.data)\n}\n\nconst create = (newObject) => {\n\treturn axios.post(baseUrl, newObject).then(response => response.data)\n}\n\nconst update = (id, newObject) => {\n\treturn axios.put(`${baseUrl}/${id}`, newObject).then(response => response.data)\n}\n\nconst deleteById = (id) => {\n\treturn axios.delete(`${baseUrl}/${id}`).then(response => response.data)\n}\n\nexport default { getAll, create, update, deleteById}","import React, { useState, useEffect } from 'react'\nimport PersonForm from './components/PersonForm'\nimport Persons from './components/Persons'\nimport Filter from './components/Filter'\nimport Notification from './components/Notification'\nimport phonebookService from './services/phonebook'\n\nconst App = () => {\n  const [ persons, setPersons ] = useState([])\n  const [ newName, setNewName ] = useState('')\n  const [ newNumber, setNewNumber ] = useState('')\n  const [ newFilter, setFilter ] = useState('')\n  const [ status, setStatus] = useState(-1)\n  const [ msgName, setMsgName] = useState('')\n\n\n  useEffect(() => {\n    phonebookService\n      .getAll()\n      .then(initialPersons => {\n        setPersons(initialPersons)\n      })\n  }, [])\n\n  const handleNameChange = (event) => {\n    setNewName(event.target.value)\n  }\n\n  const handleNumberChange = (event) => {\n    setNewNumber(event.target.value)\n  }\n\n  const addPerson = (event) => {\n    event.preventDefault()\n    const person = { \n      name: newName,\n      number: newNumber\n    }\n\n    const exist = persons.find(p => p.name === person.name)\n    \n    if (exist === undefined ){\n      phonebookService\n        .create(person)\n        .then(newPerson => {setPersons(persons.concat(newPerson));\n                            setStatus(0);\n                            setMsgName(person.name)})\n\n      setNewName('')\n      setNewNumber('')\n\n      setTimeout(() => {\n        setStatus(-1);\n        setMsgName(\"\")\n      }, 3000)\n\n\n    } else {\n      const result = window.confirm(`${person.name} is already added to phonebook, replace old number with a new one?`)\n      if (result){\n        phonebookService\n          .update(exist.id, person)\n          .then(updatedPerson => {setPersons(persons.map(p => p.id === updatedPerson.id? updatedPerson: p))})\n          .catch(err => {\n            setStatus(1)\n            setMsgName(person.name)\n          })\n\n        setTimeout(() => {\n          setStatus(-1);\n          setMsgName(\"\")\n        }, 3000)\n\n      }\n    }\n  }\n\n  const deletePerson = (person) => {\n    const result = window.confirm(`Delete ${person.name}`)\n    if (result) {\n      phonebookService\n      .deleteById(person.id)\n      .then(() => {setPersons(persons.filter(p => p.id !== person.id))})\n    }\n\n  }\n\n  const handleFilterChange = (event) => {\n    setFilter(event.target.value)\n  }\n\n  const displayPersons = newFilter ? \n    persons.filter(person => person.name.\n        toLowerCase().search(newFilter.toLowerCase()) !== -1) : persons\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification name={msgName} status={status} />\n      <Filter newFilter={newFilter} handleFilterChange={handleFilterChange} />\n      <h3>Add a new</h3>\n      <PersonForm \n        addPerson={addPerson} \n        newName={newName} \n        handleNameChange={handleNameChange}\n        newNumber={newNumber}\n        handleNumberChange={handleNumberChange}\n      />\n      <h3>Numbers</h3>\n      <Persons persons={displayPersons} handleDelete={(person) => deletePerson(person)}/>\n    </div>\n  )\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}